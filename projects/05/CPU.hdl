// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output *
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M) *
        pc[15];          // address of next instruction *

    PARTS:

    // A register
    Not(in=instruction[5], out=notd5);
    Mux16(a=instruction, b=ALUoutput, sel=instruction[15], out=firstMuxOutput); // ALU output + instruction are the inputs
    Nand(a=instruction[15], b=notd5, out=Aload);
    ARegister(in=firstMuxOutput, load=Aload, out=ARegOut, out[0..14]=addressM); // output of Mux16 is the input

    // D register
    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=secondMuxOutput);
    And(a=instruction[15], b=instruction[4], out=Dload);
    DRegister(in=ALUoutput, load=Dload, out=DRegOut);

    // Write to M?
    And(a=instruction[15], b=instruction[3], out=writeM);

    // ALU
    ALU(x=DRegOut, y=secondMuxOutput, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUoutput, zr=zero, ng=neg);

    // Jump logic
    Not(in=zero, out=notzr);
    Not(in=neg, out=pos);
    Not(in=instruction[1], out=notj1);
    Or(a=zero, b=neg, out=zorn);
    Or(a=zero, b=pos, out=zorp);
    And(a=pos, b=notzr, out=posnotzr);
    And(a=neg, b=notzr, out=negnotzr);
    And(a=instruction[0], b=instruction[1], out=j0j1);
    And(a=instruction[1], b=instruction[2], out=j1j2);
    And(a=instruction[0], b=instruction[2], out=j0j2);

    // JGT alu > 0
    And(a=instruction[0], b=posnotzr, out=jgt);
    // JEQ alu = 0
    And(a=instruction[1], b=zero, out=jeq);
    // JGE alu >= 0
    And(a=j0j1, b=zorp, out=jge);
    // JLT alu < 0
    And(a=instruction[2], b=negnotzr, out=jlt);
    // JNE alu != 0
    And(a=j0j2, b=notzr, out=jne);
    // JLE alu <= 0
    And(a=j1j2, b=zorn, out=jle);

    Or(a=jgt, b=jeq, out=o1);
    Or(a=jeq, b=o1, out=o2);
    Or(a=jge, b=o2, out=o3);
    Or(a=jlt, b=o3, out=o4);
    Or(a=jne, b=o4, out=o5);
    Or(a=jle, b=o5, out=j);

    And(a=instruction[15], b=j, out=jump);
    Not(in=jump, out=increment);

    // PC
    PC(in=ARegOut, load=jump, inc=increment, reset=reset, out[0..14]=pc);
}
